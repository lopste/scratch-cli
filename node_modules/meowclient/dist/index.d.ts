import { WebSocket } from 'ws';
import events from 'events';

interface SessionJSON {
    user: {
        id: number;
        banned: boolean;
        username: string;
        token: string;
        thumbnailUrl: string;
        dateJoined: string;
        email: string;
    };
    permissions: {
        admin: boolean;
        scratcher: boolean;
        new_scratcher: boolean;
        social: boolean;
        educator: boolean;
        educator_invitee: boolean;
        student: boolean;
        mute_status: any;
    };
    flags: {
        must_reset_password: boolean;
        must_complete_registration: boolean;
        has_outstanding_email_confirmation: boolean;
        show_welcome: boolean;
        confirm_email_banner: boolean;
        unsupported_browser_banner: boolean;
        project_comments_enabled: boolean;
        gallery_comments_enabled: boolean;
        userprofile_comments_enabled: boolean;
    };
}
interface Session {
    csrfToken: string;
    token: string;
    cookieSet: string;
    sessionJSON: SessionJSON;
}

interface UserAPIResponse {
    id: number;
    username: string;
    scratchteam: boolean;
    history: {
        joined: string;
    };
    profile: {
        id: number;
        images: {
            "90x90": string;
            "60x60": string;
            "55x55": string;
            "50x50": string;
            "32x32": string;
        };
        status: string;
        bio: string;
        country: string;
    };
}
interface ProfileCommentReply {
    id: string;
    username: string;
    content: string;
    apiID: string;
}
declare class Profile {
    user: string;
    status: string;
    private scratchUserHTML;
    session: Session;
    scratchUserAPI: UserAPIResponse;
    constructor({ username, session }: {
        username: string;
        session: Session;
    });
    /**
     * Gets the status of the user
     * Can either be Scratcher, New Scratcher, or Scratch Team.
     * @returns {string} The status of the user.
     */
    getStatus(): Promise<"Scratcher" | "New Scratcher" | "Scratch Team">;
    /**
     * Deletes a comment
     * @param id The comment ID, for example 12345, *not* comment-12345
     */
    deleteComment(id: string | number): Promise<Response>;
    private getUserHTML;
    /**
     * Gets the API response of the user in the Profile
     * @returns The API response of the user
     */
    getUserAPI(): Promise<UserAPIResponse>;
    /**
     * Gets comments on the user's profile
     * @param page The page to look at.
     * @returns {Array} An array of comments.
     * apiID is used to input into deleteComment
     */
    getComments(page?: number): Promise<ProfileCommentReply[]>;
}

declare class CloudConnection extends events.EventEmitter {
    creator: string;
    id: number;
    session: Session;
    server: string;
    connection: WebSocket;
    open: boolean;
    private queue;
    variables: object;
    disconnected: boolean;
    constructor({ id, session, server }: {
        id: number;
        session: Session;
        server?: string;
    });
    private connect;
    /**
     * Sends a packet through cloud
     */
    private send;
    /**
     * Sets a cloud variable
     * @param variable The variable name to set
     * @param value The value to set the variable to
     */
    setVariable(variable: string, value: string | number): void;
    /**
     * Gets a cloud variable
     * @param variable The variable name to get
     * @returns {string} The value of the variable in string format.
     */
    getVariable(variable: string): string;
    /**
     * Closes the cloud connection
     */
    close(): void;
}

interface ProjectAPIResponse {
    id: number;
    title: string;
    description: string;
    instructions: string;
    visibility: string;
    public: boolean;
    comments_allowed: boolean;
    is_published: boolean;
    author: {
        id: number;
        username: string;
        scratchteam: boolean;
        history: {
            joined: string;
        };
        profile: {
            id: null | number;
            images: {
                "90x90": string;
                "60x60": string;
                "55x55": string;
                "50x50": string;
                "32x32": string;
            };
        };
    };
    image: string;
    images: {
        "282x218": string;
        "216x163": string;
        "200x200": string;
        "144x108": string;
        "135x102": string;
        "100x80": string;
    };
    history: {
        created: string;
        modified: string;
        shared: string;
    };
    stats: {
        views: number;
        loves: number;
        favorites: number;
        remixes: number;
    };
    remix: {
        parent: null | number;
        root: null | number;
    };
}
interface ProjectComment {
    id: number;
    parent_id: null;
    commentee_id: null;
    content: string;
    datetime_created: string;
    datetime_modified: string;
    visibility: "visible" | "hidden";
    author: {
        id: number;
        username: string;
        scratchteam: boolean;
        image: string;
    };
}
interface ProjectCommentReply {
    id: number;
    parent_id: number;
    commentee_id: number;
    content: string;
    datetime_created: string;
    datetime_modified: string;
    visibility: "visible" | "hidden";
    author: {
        id: number;
        username: string;
        scratchteam: boolean;
        image: string;
    };
    reply_count: number;
}
declare class Project {
    id: number;
    session: Session;
    scratchProjectAPI: ProjectAPIResponse;
    constructor({ id, session }: {
        id: number;
        session: Session;
    });
    /**
     * Gets the api.scratch.mit.edu response of the project
     */
    getAPIData(): Promise<ProjectAPIResponse>;
    /**
     * Gets comments in the project
     * @param offset The offset of comments
     * @param limit The limit of comments to return
     * @returns The API response
     */
    getComments(offset?: number, limit?: number): Promise<ProjectComment[]>;
    /**
     * Gets the comment replies to a comment
     * @param offset The offset of comments
     * @param limit The limit of comments to return
     * @param id The id of the comment to get
     * @returns The comment replies
     */
    getCommentReplies(offset: number, limit: number, id: number | string): Promise<ProjectCommentReply[]>;
    /**
     * Sets the title of the project (requires ownership of the project)
     * @param value The value you want to set the title to
     */
    setTitle(value: string): Promise<void>;
    /**
     * Sets the instructions of the project (requires ownership of the project)
     * @param value The value you want to set the instructions to
     */
    setInstructions(value: string): Promise<void>;
    /**
     * Sets the Notes and Credits of the project (requires ownership of the project)
     * @param value The value you want to set the Notes and Credits to
     */
    setNotesAndCredits(value: string): Promise<void>;
    /**
     * Unshares the project (requires ownership of the project)
     */
    unshare(): Promise<void>;
    /**
     * Shares the project (requires ownership of the project)
     */
    share(): Promise<void>;
    /**
     * Creates a cloud connection with the project
     * @returns {CloudConnection} The cloud connection for the project
     * TurboWarp support may be added in the future
     */
    createCloudConnection(): CloudConnection;
}

interface OldProjectResponse {
    id: number;
    title: string;
    image: string;
    creator_id: number;
    username: string;
    avatar: {
        "90x90": string;
        "60x60": string;
        "55x55": string;
        "50x50": string;
        "32x32": string;
    };
    actor_id: number;
}
interface StudioAPIResponse {
    id: number;
    title: string;
    host: number;
    description: string;
    visibility: "visible" | "hidden";
    public: boolean;
    open_to_all: boolean;
    comments_allowed: boolean;
    image: string;
    history: {
        created: string;
        modified: string;
    };
    stats: {
        comments: number;
        followers: number;
        managers: number;
        projects: number;
    };
}
declare class Studio {
    id: number;
    session: Session;
    scratchStudioAPI: StudioAPIResponse;
    constructor({ id, session }: {
        id: number;
        session: Session;
    });
    getAPIData(): Promise<StudioAPIResponse>;
    /**
     * Sets the title of the studio.
     * @param value The value to set the title to
     */
    setTitle(value: string): Promise<Response>;
    /**
     * Sets the description of the studio.
     * @param value The value to set the description to
     */
    setDescription(value: string): Promise<Response>;
    /**
     * Invites a curator to the studio.
     * @param username The username of the user to add
     */
    inviteCurator(username: string): Promise<Response>;
    /**
     * Removes a curator from the studio.
     * @param username The username of the user to remove
     */
    removeCurator(username: string): Promise<Response>;
    /**
     * Adds a project to the studio.
     * @param project The project ID to add to the studio
     */
    addProject(project: number): Promise<Response>;
    /**
     * Removes a project from the studio.
     * @param project The project ID to remove from the studio
     */
    removeProject(project: number): Promise<Response>;
    /**
     * Gets the curators in a studio.
     * @param limit The limit of curators to return
     * @param offset The offset of the curators to return
     * @returns An array of curators
     */
    getCurators(limit?: number, offset?: number): Promise<UserAPIResponse[]>;
    /**
     * Gets the managers in a studio.
     * @param limit The limit of managers to return
     * @param offset The offset of the managers to return
     * @returns An array of managers
     */
    getManagers(limit?: number, offset?: number): Promise<UserAPIResponse[]>;
    /**
     * Gets the projects in a studio.
     * @param limit The limit of projects to return
     * @param offset The offset of the projects to return
     * @returns An array of users
     */
    getProjects(limit?: number, offset?: number): Promise<OldProjectResponse[]>;
}

declare class Topic {
    id: number;
    session: Session;
    sticky?: boolean;
    title?: string;
    replyCount?: number;
    constructor({ id, session, sticky, title, replyCount }: {
        id: number;
        session: Session;
        sticky?: boolean;
        title?: string;
        replyCount?: number;
    });
    /**
     * Gets the posts in the topic
     * @returns An array of posts in the topic
     */
    getPosts(): Promise<any[]>;
    /**
     * Follows the topic
     * @returns The request
     */
    follow(): Promise<Response>;
    /**
     * Unfollows the topic
     * @returns The request
     */
    unfollow(): Promise<Response>;
}

declare class Forum {
    id?: number;
    session: Session;
    constructor({ id, session }: {
        id?: number;
        session: Session;
    });
    /**
     * Gets a list of topics
     * @returns An array of topics
     */
    getTopics(): Promise<Topic[]>;
    /**
     * Gets a topic
     *
     * Note: Topic.sticky, Topic.title, and Topic.replyCount give undefined when using this!
     * @param id The ID of the topic
     * @returns {Topic} The topic
     */
    getTopic(id: number): Topic;
    /**
     * Sets the currently logged in user's signature
     * @param content The content to set the signature to
     * @returns {Request} The request to set the signature
     */
    setSignature(content: string): Promise<Response>;
}

/**
 * Logs into Scratch
 */
declare class ScratchSession {
    username: string;
    csrfToken: string;
    token: string;
    cookieSet: string;
    sessionJSON: SessionJSON;
    /**
     * Sets up the ScratchSession to use authenticated functions
     * @param user The username of the user you want to log in to
     * @param pass The password of the user you want to log in to
     */
    init(user: string, pass: string): Promise<void>;
    /**
     * Gets a profile
     * @param username The username of the profile you want to get
     * @returns {Profile} The profile of the user
     */
    getProfile(username: string): Profile;
    /**
     * Gets a project
     * @param id The project ID
     * @returns {Project} The project
     */
    getProject(id: number): Project;
    /**
     * Gets a studio
     * @param id The studio ID
     * @returns {Studio} The studio
     */
    getStudio(id: number): Studio;
    /**
     * Gets a forum
     * @param id (optional) The ID of the forum you want to get (for example, 31 for the "Advanced Topics" forum)
     * @returns {Forum} The forum
     */
    getForum(id?: number): Forum;
    /**
     * Logs out of Scratch
     */
    logout(): Promise<void>;
}

export { ScratchSession };
